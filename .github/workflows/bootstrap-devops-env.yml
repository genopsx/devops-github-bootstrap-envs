name: Bootstrap DevOps Environment

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC

jobs:
  setup-devops-env:
    environment: devops
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        org: [genopsx]

    permissions:
      id-token: write
      contents: write
      actions: write
      issues: write

    env:
      ENV_NAME: devops
      SECRET_MANAGER_NAME: ${{ secrets.DEVOPS_SECRET_MANAGER_NAME }}
      SLACK_CHANNEL: devops-github-envs-sync
      DEPLOYMENT_ROLE_SESSION_NAME: "bootstrap-devops-env-${{ github.run_id }}"
      PROVISIONER_REGION: eu-west-1


      # Secret keys
      SECRET_SEMANTIC_RELEASE_TOKEN:
      SECRET_GIT_USERNAME:
      SECRET_REPO_ACCESS_TOKEN:

      # Variable keys
      VAR_DEPLOY_ACCOUNT:
      VAR_PROVISIONER_REGION:
      VAR_DEPLOYMENT_ROLE_NAME:

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.VAR_DEPLOY_ACCOUNT }}:role/${{ secrets.SECRET_RETRIEVER_ROLE_NAME }}
          aws-region: ${{ env.PROVISIONER_REGION }}
          role-session-name: ${{ env.DEPLOYMENT_ROLE_SESSION_NAME }}

      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1

      - name: Install GH CLI
        uses: dev-hanz-ops/install-gh-cli-action@v0.2.0

      - name: Fetch and set secrets from AWS Secrets Manager
        id: fetch_secrets
        run: |
          set -euo pipefail
          echo "🔐 Retrieving secret JSON from AWS Secrets Manager: $SECRET_MANAGER_NAME"
          secret_json=$(aws secretsmanager get-secret-value --secret-id "$SECRET_MANAGER_NAME" --query SecretString --output text)

          echo "✅ Parsing env keys with prefix 'SECRET_' or 'VAR_'..."
          while IFS='=' read -r name value; do
            if [[ "$name" == SECRET_* || "$name" == VAR_* ]]; then
              json_key="${name#SECRET_}"
              json_key="${json_key#VAR_}"
              val=$(echo "$secret_json" | jq -r ".${json_key}")
              echo "::add-mask::$val"
              echo "$name=$val" >> $GITHUB_ENV
            fi
          done < <(env)

      - name: List repositories
        env:
          GITHUB_TOKEN: ${{ env.SECRET_REPO_ACCESS_TOKEN }}
        run: |
          set -euo pipefail
          gh repo list ${{ matrix.org }} --limit 1000 --json name -q '.[].name' > repos.txt

      - name: Create or update environment
        env:
          GITHUB_TOKEN: ${{ env.SECRET_REPO_ACCESS_TOKEN }}
        run: |
          set -euo pipefail
          touch created_env.txt existing_env.txt

          while IFS= read -r repo; do
            echo ""
            echo "🔧 Processing $repo"

            ## -------------------------------------
            ## Ensure the environment exists
            ## -------------------------------------
            if gh api repos/${{ matrix.org }}/$repo/environments/${ENV_NAME} --silent > /dev/null 2>&1; then
              echo "✅ Already existed in $repo"
              echo "$repo" >> existing_env.txt
            else
              echo "🚧 Creating environment..."
              gh api -X PUT repos/${{ matrix.org }}/$repo/environments/${ENV_NAME}
              echo "$repo" >> created_env.txt

              ## Notify via GitHub Issue
              gh issue create \
                --repo "${{ matrix.org }}/$repo" \
                --title "📦 '${ENV_NAME}' environment bootstrapped" \
                --body "The '${ENV_NAME}' environment was added with shared secrets and variables from AWS Secrets Manager. Please review the configuration." \
                --label "automation,env-bootstrap"
            fi

            ## -----------------------------
            ## Set environment secrets
            ## -----------------------------
            for env_var in $(env | grep '^SECRET_' | cut -d= -f1); do
              key="${env_var#SECRET_}"
              value="${!env_var}"
              echo "$value" | gh secret set "$key" --repo "${{ matrix.org }}/$repo" --env "$ENV_NAME" --body -
            done

            ## -----------------------------
            ## Set environment variables
            ## -----------------------------
            for env_var in $(env | grep '^VAR_' | cut -d= -f1); do
              var="${env_var#VAR_}"
              val="${!env_var}"
              gh api -X PUT repos/${{ matrix.org }}/$repo/environments/${ENV_NAME}/variables/$var \
                -f name=$var \
                -f value="$val"
            done
          done < repos.txt

      - name: Log Summary
        id: log_summary
        run: |
          echo "created_envs<<EOF" >> $GITHUB_OUTPUT
          cat created_env.txt || echo "(none)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "existing_envs<<EOF" >> $GITHUB_OUTPUT
          cat existing_env.txt || echo "(none)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send Slack Notification
        if: always()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "channel": "${{ env.SLACK_CHANNEL }}",
              "text": "*📢 DevOps Environment Bootstrap Summary*",
              "blocks": [
                {
                  "type": "section",
                  "text": { "type": "mrkdwn", "text": "*✅ '${{ env.ENV_NAME }}' already existed in:* \n\n```${{ steps.log_summary.outputs.existing_envs }}```" }
                },
                {
                  "type": "section",
                  "text": { "type": "mrkdwn", "text": "*🆕 '${{ env.ENV_NAME }}' was created in:* \n\n```${{ steps.log_summary.outputs.created_envs }}```" }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.DEVOPS_GITHUB_ENVS_SYNC_SLACK_WEBHOOK_URL }}
