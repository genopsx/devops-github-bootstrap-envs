name: Bootstrap DevOps Environment

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC

jobs:
  setup-devops-env:
    environment: devops
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        org: [genopsx]

    permissions:
      id-token: write
      contents: write
      actions: write
      issues: write

    env:
      ENV_NAME: devops
      DEVOPS_SECRET_MANAGER_NAME: ${{ secrets.DEVOPS_SECRET_MANAGER_NAME }}
      SLACK_CHANNEL: devops-github-envs-sync
      DEPLOYMENT_ROLE_SESSION_NAME: "bootstrap-devops-env-${{ github.run_id }}"
      ACCOUNT: ${{ vars.ACCOUNT }}
      REGION: eu-west-1

      # Secret keys
      SECRET_SEMANTIC_RELEASE_TOKEN:
      SECRET_GIT_USERNAME:
      SECRET_REPO_ACCESS_TOKEN:

      # Variable keys
      VAR_DEPLOY_ACCOUNT:
      VAR_PROVISIONER_REGION:
      VAR_DEPLOYMENT_ROLE_NAME:

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT }}:role/${{ secrets.SECRET_RETRIEVER_ROLE_NAME }}
          aws-region: ${{ env.REGION }}
          role-session-name: ${{ env.DEPLOYMENT_ROLE_SESSION_NAME }}

      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1

      - name: Install GH CLI
        uses: dev-hanz-ops/install-gh-cli-action@v0.2.1
        with:
          gh-cli-version: 2.65.0 

      - name: Fetch and set secrets from AWS Secrets Manager
        id: fetch_secrets
        run: |
          echo "DEBUG: DEVOPS_SECRET_MANAGER_NAME='$DEVOPS_SECRET_MANAGER_NAME'"
          set -euo pipefail
          echo "üîê Retrieving secret JSON from AWS Secrets Manager: $DEVOPS_SECRET_MANAGER_NAME"
          secret_json=$(aws secretsmanager get-secret-value --secret-id "$DEVOPS_SECRET_MANAGER_NAME" --query SecretString --output text)
      
          echo "‚úÖ Parsing env keys with prefix 'SECRET_' or 'VAR_'..."
          while IFS='=' read -r name value; do
            if [[ "$name" == SECRET_* || "$name" == VAR_* ]]; then
              json_key="${name#SECRET_}"
              json_key="${json_key#VAR_}"
              val=$(echo "$secret_json" | jq -r ".${json_key}")
              echo "::add-mask::$val"
              echo "$name=$val" >> $GITHUB_ENV
            fi
          done < <(env)
      
      - name: List repositories
        env:
          GH_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
        run: |
          set -euo pipefail
          echo "üîç Fetching repositories from '${{ matrix.org }}'..."
          gh auth status
          gh repo list ${{ matrix.org }} \
            --limit 1000 \
            --no-archived \
            --json name \
            -q '.[].name' > repos.txt
      
          echo "‚úÖ Found $(wc -l < repos.txt) repositories:"
          cat repos.txt
      
      - name: Ensure 'admins' team has admin access to all repositories
        run: |
          set -euo pipefail
          touch updated_admin_team.txt
      
          while IFS= read -r repo; do
            echo "üë• Ensuring 'admins' team has admin access to $repo"
            if gh api orgs/${{ matrix.org }}/teams/admins --silent > /dev/null 2>&1; then
              echo "‚úÖ 'admins' team exists"
            else
              echo "‚ûï Creating 'admins' team"
              gh api -X POST orgs/${{ matrix.org }}/teams -f name=admins
            fi
      
            echo "üîÅ Setting 'admins' role to admin in $repo"
            gh api -X PUT \
              orgs/${{ matrix.org }}/teams/admins/repos/${{ matrix.org }}/$repo \
              -f permission=admin
      
            echo "$repo" >> updated_admin_team.txt
          done < repos.txt
        env:
          GH_TOKEN: ${{ secrets.ORG_OWNER_ACCESS_TOKEN }}
      
      - name: Create or update environment
        env:
          GH_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
        run: |
          set -euo pipefail
          touch created_env.txt existing_env.txt
      
          while IFS= read -r repo; do
            echo ""
            echo "üîß Processing $repo"
      
            ## Ensure the environment exists
            if gh api repos/${{ matrix.org }}/$repo/environments/${ENV_NAME} --silent > /dev/null 2>&1; then
              echo "‚úÖ Already existed in $repo"
              echo "$repo" >> existing_env.txt
            else
              echo "üöß Creating environment..."
              gh api -X PUT repos/${{ matrix.org }}/$repo/environments/${ENV_NAME}
              echo "$repo" >> created_env.txt
      
              ## Ensure labels exist
              for label in automation env-bootstrap; do
                if ! gh label list --repo "${{ matrix.org }}/$repo" | grep -q "^$label"; then
                  echo "‚ûï Creating label '$label' in $repo"
                  gh label create "$label" --repo "${{ matrix.org }}/$repo" --color FF9D00 --description "Added by bootstrap workflow"
                else
                  echo "‚úÖ Label '$label' already exists in $repo"
                fi
              done
      
              ## Notify via GitHub Issue
              gh issue create \
                --repo "${{ matrix.org }}/$repo" \
                --title "üì¶ '${ENV_NAME}' environment bootstrapped" \
                --body "The '${ENV_NAME}' environment was added with shared secrets and variables from AWS Secrets Manager. Please review the configuration." \
                --label "automation,env-bootstrap"
            fi
      
            ## Set environment secrets
            for env_var in $(env | grep '^SECRET_' | cut -d= -f1); do
              key="${env_var#SECRET_}"
              value="${!env_var}"
              gh secret set "$key" \
                --repo "${{ matrix.org }}/$repo" \
                --env "$ENV_NAME" \
                --body "$value"
            done
      
            ## Set environment variables
            for env_var in $(env | grep '^VAR_' | cut -d= -f1); do
              var="${env_var#VAR_}"
              val="${!env_var}"
              gh variable set "$var" \
                --repo "${{ matrix.org }}/$repo" \
                --env "$ENV_NAME" \
                --body "$val"
            done
          done < repos.txt
        

      - name: Log Summary
        id: log_summary
        run: |
          echo "üì¶ Logging DevOps environment and team summary..."
      
          make_links() {
            if [ -f "$1" ] && [ -s "$1" ]; then
              awk '{print "<https://github.com/genopsx/" $1 "|"$1">"}' "$1"
            else
              echo "(none)"
            fi
          }
      
          # Collect formatted outputs
          created_envs=$(make_links created_env.txt)
          existing_envs=$(make_links existing_env.txt)
      
          admin_team_updated=$(make_links updated_admin_team.txt)
          admin_team_created=$(make_links created_admin_team.txt)
          admin_team_ok=$(make_links ok_admin_team.txt)
      
          # Export to GitHub Actions outputs
          echo "created_envs<<EOF" >> $GITHUB_OUTPUT
          echo "$created_envs" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
          echo "existing_envs<<EOF" >> $GITHUB_OUTPUT
          echo "$existing_envs" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
          echo "admin_team_updated<<EOF" >> $GITHUB_OUTPUT
          echo "$admin_team_updated" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
          echo "admin_team_created<<EOF" >> $GITHUB_OUTPUT
          echo "$admin_team_created" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
          echo "admin_team_ok<<EOF" >> $GITHUB_OUTPUT
          echo "$admin_team_ok" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
          echo "‚úÖ Summary logged successfully."
        
        
  
      - name: Cleanup temporary files
        run: |
          echo "üßπ Cleaning up temporary files..."
          rm -f created_env.txt existing_env.txt repos.txt updated_admin_team.txt
          echo "üßπ Cleanup completed."
  
      - name: Send Slack Notification
        if: always()
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook-type: incoming-webhook
          webhook: ${{ secrets.DEVOPS_GITHUB_ENVS_SYNC_SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "*üì¢ DevOps Environment Bootstrap Summary*",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*‚úÖ \"${{ env.ENV_NAME }} already existed\":*\n${{ steps.log_summary.outputs.existing_envs }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*üÜï \"${{ env.ENV_NAME }} was created\":*\n${{ steps.log_summary.outputs.created_envs }}"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*üë• 'admins' team access updated:*"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*üîÅ Role updated in:*\n${{ steps.log_summary.outputs.admin_team_updated }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*üÜï Created in:*\n${{ steps.log_summary.outputs.admin_team_created }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*‚úÖ Already existed with correct role in:*\n${{ steps.log_summary.outputs.admin_team_ok }}"
                  }
                }
              ]
            }
        
        
